[{"action":"saveAppHtml","code":"function(appHtml) {\n  return simplyDataApi.saveAppHtml(appHtml);\n}","command":"","tests":[],"editor":"code"},{"action":"getBaseComponents","code":"function() {\n  var promises = [];\n  return simplyApp.actions.listBaseComponents()\n    .then(function(baseComponents) {\n    baseComponents.forEach(function(baseComponent) {\n      promises.push(simplyApp.actions.getBaseComponent(baseComponent.id));\n    });\n  })\n    .then(function() {\n    return Promise.all(promises);\n  });\n}","command":"","tests":[],"editor":"code"},{"action":"getComponents","code":"function() {\n  var promises = [];\n  return simplyApp.actions.listComponents()\n    .then(function(components) {\n    components.forEach(function(component) {\n      promises.push(simplyApp.actions.getComponent(component.id));\n    });\n  })\n    .then(function() {\n    return Promise.all(promises);\n  });\n}","command":"","tests":[],"editor":"code"},{"action":"getPages","code":"function() {\n  var promises = [];\n  return simplyApp.actions.listPages()\n    .then(function(pages) {\n    pages.forEach(function(page) {\n      promises.push(simplyApp.actions.getPage(page.id));\n    });\n  })\n    .then(function() {\n    return Promise.all(promises);\n  });\n}","command":"","tests":[],"editor":"code"},{"action":"getAppData","code":"function() {\n  var appData = {\n  };\n  return simplyApp.actions.getPageFrame()\n    .then(function(component) {\n    var frame = {};\n    component.forEach(function(part) {\n      if (part.id == \"meta\") {\n        return;\n      };\n      frame[part.id] = JSON.parse(part.contents);\n    });\n    appData.pageFrame = frame;\n  })\n  .then(function() {\n    var promises = [\n      simplyApp.actions.getBaseComponents(),\n      simplyApp.actions.getComponents(),\n      simplyApp.actions.getPages()\n    ];\n    return Promise.all(promises);\n  })\n  .then(function(appComponents) {\n    appComponents.forEach(function(appComponent) {\n      appComponent.forEach(function(component) {\n        component.forEach(function(part) {\n          if (part.id == \"meta\") {\n            return;\n          };\n\n          if (typeof appData[part.id] === \"undefined\") {\n            appData[part.id] = [];\n          }\n          parts = JSON.parse(part.contents);\n          parts.forEach(function(entry) {\n            appData[part.id].push(entry);\n          });\n        });\n      });\n    });\n  })\n  .then(function() {\n    if (appData[\"routes\"]) {\n      appData[\"routes\"].sort(function(a, b) {\n        routeAWeight = simplyApp.actions.getRouteWeight(a);\n        routeBWeight = simplyApp.actions.getRouteWeight(b);\n        if (routeAWeight > routeBWeight) {\n          return -1;\n        } else if (routeAWeight < routeBWeight) {\n          return 1;\n        } else {\n          if (a > b) {\n            return -1;\n          } else if (a < b) {\n            return 1;\n          } else {\n            return 0;\n          }\n        }\n      });\n    }\n    return appData;\n  });\n}","command":"","tests":[],"editor":"code"},{"action":"getRouteWeight","editor":"tests","code":"function(route) {\n  var pathicles = route.route.split(\"/\");\n  var weight = \"\";\n  pathicles.forEach(function(pathicle) {\n    if (pathicle.length === 0) {\n      return;\n    }\n    if (pathicle.match(/^:/)) {\n      weight += \"0\";\n    } else {\n      weight += \"1\";\n    }\n  });\n  if (weight == \"\") {\n    weight = -1;\n  }\n  return parseInt(weight);\n}","tests":[{"name":"Fixed path 3 items","test-code":"function(assert) {\n  var path = \"#foo/bar/bla\";\n  var weight = actions.getRouteWeight(path);\n  assert.equal(111, weight, \"Path with 3 fixed items weighs 111\");\n}"}]}]